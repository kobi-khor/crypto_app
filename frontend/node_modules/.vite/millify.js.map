{
  "version": 3,
  "sources": ["../millify/dist/options.js", "../millify/dist/utils.js", "../millify/dist/millify.js", "dep:millify"],
  "sourcesContent": ["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultOptions = void 0;\n/**\n * Default options for Millify.\n */\nexports.defaultOptions = {\n    decimalSeparator: \".\",\n    lowercase: false,\n    precision: 1,\n    space: false,\n    units: [\n        \"\",\n        \"K\",\n        \"M\",\n        \"B\",\n        \"T\",\n        \"P\",\n        \"E\", // Quintillion\n    ],\n};\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.roundTo = exports.parseValue = void 0;\n/**\n * parseValue ensures the value is a number and within accepted range.\n */\nfunction parseValue(value) {\n    const val = parseFloat(value.toString());\n    if (isNaN(val)) {\n        throw new Error(`Input value is not a number`);\n    }\n    if (val > Number.MAX_SAFE_INTEGER || val < Number.MIN_SAFE_INTEGER) {\n        throw new RangeError(\"Input value is outside of safe integer range\");\n    }\n    return val;\n}\nexports.parseValue = parseValue;\n/**\n * Rounds a number [value] up to a specified [precision].\n */\nfunction roundTo(value, precision) {\n    if (!Number.isFinite(value)) {\n        throw new Error(\"Input value is not a finite number\");\n    }\n    if (!Number.isInteger(precision) || precision < 0) {\n        throw new Error(\"Precision is not a positive integer\");\n    }\n    if (Number.isInteger(value)) {\n        return value;\n    }\n    return parseFloat(value.toFixed(precision));\n}\nexports.roundTo = roundTo;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n// Most commonly used digit grouping base.\nconst DIGIT_GROUPING_BASE = 1000;\n/**\n * Generator that divides a number until a decimal value is found.\n *\n * The denominator is defined by the numerical digit grouping base,\n * or interval. The most commonly-used digit group interval is 1000.\n *\n * e.g. 1,000,000 is grouped in multiples of 1000.\n */\nfunction* divider(value) {\n    // Create a mutable copy of the base.\n    let denominator = DIGIT_GROUPING_BASE;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            // End of operation. We can't divide the value any further.\n            return;\n        }\n        yield result;\n        // The denominator is increased every iteration by multiplying\n        // the base by itself, until a decimal value remains.\n        denominator *= DIGIT_GROUPING_BASE;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    var _a;\n    // Override default options with options supplied by user.\n    const opts = options\n        ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // Validate value for type and length.\n    let val = utils_1.parseValue(value);\n    // Add a minus sign (-) prefix if it's a negative number.\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake.\n    val = Math.abs(val);\n    // Keep dividing the input value by the digit grouping base\n    // until the decimal and the unit index is deciphered.\n    let unitIndex = 0;\n    for (const result of divider(val)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Return the original number if the number is too large to have\n    // a corresponding unit. Returning anything else is ambiguous.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    if (unitIndexOutOfRange) {\n        return value.toString();\n    }\n    // Round decimal up to desired precision.\n    let rounded = utils_1.roundTo(val, opts.precision);\n    // Fixes an edge case bug that outputs certain numbers as 1000K instead of 1M.\n    // The rounded value needs another iteration in the divider cycle.\n    for (const result of divider(rounded)) {\n        rounded = result;\n        unitIndex += 1;\n    }\n    // Calculate the unit suffix and make it lowercase (if needed).\n    const unit = (_a = opts.units[unitIndex]) !== null && _a !== void 0 ? _a : \"\";\n    const suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    // Add a space between number and abbreviation.\n    const space = opts.space ? \" \" : \"\";\n    // Replace decimal mark if desired.\n    const formatted = rounded\n        .toString()\n        .replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n", "export default require(\"./node_modules/millify/dist/millify.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO;AACtD,YAAQ,iBAAiB;AAIzB,YAAQ,iBAAiB;AAAA,MACrB,kBAAkB;AAAA,MAClB,WAAW;AAAA,MACX,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAAA;AAAA;AAAA;;;AClBR;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO;AACtD,YAAQ,UAAU,QAAQ,aAAa;AAIvC,wBAAoB,OAAO;AACvB,YAAM,MAAM,WAAW,MAAM;AAC7B,UAAI,MAAM,MAAM;AACZ,cAAM,IAAI,MAAM;AAAA;AAEpB,UAAI,MAAM,OAAO,oBAAoB,MAAM,OAAO,kBAAkB;AAChE,cAAM,IAAI,WAAW;AAAA;AAEzB,aAAO;AAAA;AAEX,YAAQ,aAAa;AAIrB,qBAAiB,OAAO,WAAW;AAC/B,UAAI,CAAC,OAAO,SAAS,QAAQ;AACzB,cAAM,IAAI,MAAM;AAAA;AAEpB,UAAI,CAAC,OAAO,UAAU,cAAc,YAAY,GAAG;AAC/C,cAAM,IAAI,MAAM;AAAA;AAEpB,UAAI,OAAO,UAAU,QAAQ;AACzB,eAAO;AAAA;AAEX,aAAO,WAAW,MAAM,QAAQ;AAAA;AAEpC,YAAQ,UAAU;AAAA;AAAA;;;AChClB;AAAA;AAAA;AACA,WAAO,eAAe,SAAS,cAAc,EAAE,OAAO;AACtD,YAAQ,UAAU;AAClB,QAAM,YAAY;AAClB,QAAM,UAAU;AAEhB,QAAM,sBAAsB;AAS5B,sBAAkB,OAAO;AAErB,UAAI,cAAc;AAClB,aAAO,MAAM;AACT,cAAM,SAAS,QAAQ;AACvB,YAAI,SAAS,GAAG;AAEZ;AAAA;AAEJ,cAAM;AAGN,uBAAe;AAAA;AAAA;AAMvB,qBAAiB,OAAO,SAAS;AAC7B,UAAI;AAEJ,YAAM,OAAO,UACP,OAAO,OAAO,OAAO,OAAO,IAAI,UAAU,iBAAiB,WAAW,UAAU;AACtF,UAAI,CAAC,MAAM,QAAQ,KAAK,UAAU,CAAC,KAAK,MAAM,QAAQ;AAClD,cAAM,IAAI,MAAM;AAAA;AAGpB,UAAI,MAAM,QAAQ,WAAW;AAE7B,YAAM,SAAS,MAAM,IAAI,MAAM;AAE/B,YAAM,KAAK,IAAI;AAGf,UAAI,YAAY;AAChB,iBAAW,UAAU,QAAQ,MAAM;AAC/B,cAAM;AACN,qBAAa;AAAA;AAIjB,YAAM,sBAAsB,aAAa,KAAK,MAAM;AACpD,UAAI,qBAAqB;AACrB,eAAO,MAAM;AAAA;AAGjB,UAAI,UAAU,QAAQ,QAAQ,KAAK,KAAK;AAGxC,iBAAW,UAAU,QAAQ,UAAU;AACnC,kBAAU;AACV,qBAAa;AAAA;AAGjB,YAAM,OAAQ,MAAK,KAAK,MAAM,gBAAgB,QAAQ,OAAO,SAAS,KAAK;AAC3E,YAAM,SAAS,KAAK,YAAY,KAAK,gBAAgB;AAErD,YAAM,QAAQ,KAAK,QAAQ,MAAM;AAEjC,YAAM,YAAY,QACb,WACA,QAAQ,UAAU,eAAe,kBAAkB,KAAK;AAC7D,aAAO,GAAG,SAAS,YAAY,QAAQ;AAAA;AAE3C,YAAQ,UAAU;AAClB,YAAQ,UAAU;AAAA;AAAA;;;AChFlB,IAAO,kBAAQ;",
  "names": []
}
